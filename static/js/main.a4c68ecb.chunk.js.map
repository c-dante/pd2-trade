{"version":3,"sources":["D2Item.tsx","App.tsx","util.ts","reportWebVitals.ts","index.tsx"],"names":["ItemStat","stat","rangeSuffix","range","className","min","max","undefined","level","skill","name","value","D2Item","item","settings","type","classNames","hideProps","defense","stats","map","i","Stash","stash","useState","collapse","setCollapse","onClick","file","style","float","error","String","idx","App","setSettings","useDropzone","accept","noClick","noKeyboard","acceptedFiles","getRootProps","getInputProps","isDragActive","open","useAsync","promises","Promise","res","reader","FileReader","onload","evt","target","JSON","parse","result","onerror","abort","readAsText","all","loading","useEffect","console","log","length","stringify","htmlFor","id","checked","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4c68ecb.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { FC } from 'react';\nimport type { Settings } from './util';\n\nexport type Quality = 'Magic' | 'Unique' | 'Set' | 'Normal';\n\nexport interface Stat {\n\tname: string;\n\n\t// Skills?\n\tskill?: string;\n\n\t// Proc\n\t'chance%'?: number;\n\tlevel?: number;\n\n\t// Value\n\tvalue?: number;\n\n\t// Range\n\trange?: { min: number, max: number };\n\n\t// Damage range\n\tmin?: number;\n\tmax?: number;\n};\n\nexport interface Item {\n\tname?: string;\n\tiLevel: number;\n\tquality: Quality;\n\ttype: string;\n\tstats?: Stat[];\n\t// Based on type\n\tdefense?: number;\n\tsockets?: number;\n};\n\nexport interface D2SetItem extends Item {\n\tquality: 'Set';\n\tset: string;\n};\n\ninterface ItemStatProps {\n\tstat: Stat;\n};\nconst ItemStat: FC<ItemStatProps> = ({ stat }) => {\n\tconst rangeSuffix = stat.range\n\t\t? (<span className=\"d2-item-range\">[{stat.range.min} - {stat.range.max}]</span>)\n\t\t: null;\n\n\tif (stat.level !== undefined) {\n\t\treturn (\n\t\t\t<span className=\"d2-item-stat\">{stat['chance%']}% to {stat.skill} {stat.name}{rangeSuffix}</span>\n\t\t);\n\t}\n\tconst value = (() => {\n\t\tif (stat.min !== undefined) {\n\t\t\treturn <span className=\"d2-item-value\">{stat.min} - {stat.max}</span>;\n\t\t}\n\n\t\treturn stat.value\n\t\t\t? <span className=\"d2-item-value\">{stat.value}</span>\n\t\t\t: null;\n\t})();\n\treturn (\n\t\t<span className=\"d2-item-stat\">{value} {stat.name} {stat.skill ?? null}{rangeSuffix}</span>\n\t);\n};\n\nexport interface D2ItemProps {\n\titem: Item;\n\tsettings: Settings;\n};\n\n\nexport const D2Item: FC<D2ItemProps> = ({ item, settings }) => (\n\t<div className=\"d2-item\">\n\t\t<span className=\"d2-item-name\">{item.name ?? item.type}</span>\n\t\t<span className={classNames('d2-item-props', {\n\t\t\t'hidden': settings.hideProps,\n\t\t})}>\n\t\t\t<span className=\"d2-item-stat d2-item-type\">{item.type}</span>\n\t\t\t{item.defense && <span className=\"d2-item-stat\">Defense: <span className=\"d2-item-value\">{item.defense}</span></span>}\n\t\t\t{(item.stats ?? []).map((stat, i) => (\n\t\t\t\t<ItemStat stat={stat} key={i} />\n\t\t\t))}\n\t\t</span>\n\t</div>\n);","import { FC, useEffect, useState } from 'react';\nimport './App.css';\nimport { useDropzone } from 'react-dropzone';\nimport { useAsync } from 'react-use';\nimport { Item, D2Item } from './D2Item';\nimport classNames from 'classnames';\nimport { defaultSettings } from './util';\nimport type { Settings } from './util';\n\ninterface FileLoad<T, E> {\n  file: File;\n  value?: T;\n  error?: E;\n}\n\n\ninterface StashProps {\n  stash: FileLoad<Item[], any>;\n  settings: Settings;\n};\n\nconst Stash: FC<StashProps> = ({ stash, settings }) => {\n  const [collapse, setCollapse] = useState(false);\n  return (\n    <div className=\"stash\">\n      <h3 className=\"stash-owner clickable\" onClick={() => setCollapse(!collapse)}>\n        {stash.file.name}\n        <span style={{\n          float: 'right',\n        }}>{collapse ? 'Show' : 'Hide'}</span>\n      </h3>\n      {stash.error && <span className=\"stash-error\">Oh no! {String(stash.error)}</span>}\n      <span className={classNames('stash-items', {\n        'hidden': collapse,\n      })}>\n        {(stash.value ?? []).map(\n          (item, idx) => <D2Item item={item} key={idx} settings={settings} />\n        )}\n      </span>\n    </div>\n  );\n};\n\nfunction App() {\n  const [settings, setSettings] = useState(defaultSettings());\n\n  const {\n    acceptedFiles,\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    open,\n  } = useDropzone({\n    accept: 'text/plain, application/json',\n    noClick: true,\n    noKeyboard: true,\n  });\n\n  const { loading, error, value } = useAsync(() => {\n    // Load files\n    const promises = acceptedFiles.map(file => new Promise<FileLoad<Item[], any>>((res) => {\n      const reader = new FileReader();\n      reader.onload = evt => {\n        if (evt.target) {\n          try {\n            res({\n              file,\n              value: JSON.parse(String(evt.target.result)),\n            });\n          } catch (error) {\n            res({\n              file,\n              error,\n            });\n          }\n        }\n      };\n      reader.onerror = () => {\n        res({\n          file,\n          error: reader.error,\n        });\n        reader.abort();\n      };\n      reader.readAsText(file);\n    }));\n\n    // Settle load\n    return Promise.all(promises);\n  }, [acceptedFiles]);\n\n  useEffect(() => {\n    console.log(loading, error, value);\n  }, [loading, error, value]);\n\n  return (\n    <div className=\"App\">\n      <div {...getRootProps()} className=\"drop-zone\">\n        <input {...getInputProps()} />\n        <p>{isDragActive ? 'drop files' : 'drop stash folder / export files'}</p>\n        <button type=\"button\" onClick={open}>Open Stash Files</button>\n      </div>\n      <div className={classNames('results-window', {\n        'hidden': !value || value.length <= 0\n      })}>\n        <div className=\"stash-results\">\n          {loading ? 'Loading...' : ''}\n          {error && JSON.stringify(error)}\n          {value && value.map((stash, i) => (\n            <Stash key={i} stash={stash} settings={settings} />\n          ))}\n        </div>\n        <div className=\"filter-menu\">\n          <h3>Filter Menu</h3>\n          <label htmlFor=\"setting-hide-props\">\n            <input type=\"checkbox\" id=\"setting-hide-props\" checked={settings.hideProps} onChange={() => setSettings({ ...settings, hideProps: !settings.hideProps })} />\n            Hide Props\n          </label>\n        </div>\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","export const defaultSettings = () => ({\n\thideProps: true,\n});\n\nexport type Settings = ReturnType<typeof defaultSettings>;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}